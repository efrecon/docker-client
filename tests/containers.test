if {"::tcltest" ni [namespace children]} {
    package require tcltest 2
    namespace import -force ::tcltest::*
}

lappend auto_path [file join [file dirname [info script]] .. docker]
package require docker

proc ::WaitFor { c pfx { state "running" } {trials 10} {sleep 1000}} {
    set status ""
    # Wait for container to be running.
    for { set i 0 } { $i < $trials } {incr i} {
        set nfo [$c container inspect $pfx]
        set status [dict get $nfo State Status]
        if { $status eq $state } {
            return $status
        }
        after $sleep
    }
    return $status
}


test containers-ls {Listing containers} -setup {
    set pfx "Imp0ss1bl3__"
    exec -ignorestderr -- docker run --rm -d --name=${pfx} alpine sh -c "while true ; do sleep 1 ; done"
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    foreach container [$c container ls] {
        if { [dict exists $container Names] } {
            foreach name [dict get $container Names] {
                set name [string trimleft $name "/"]
                if { $name eq $pfx } {
                    return $name
                }
            }
        }
    }
} -result "Imp0ss1bl3__" -cleanup {
    exec -ignorestderr -- docker kill $pfx
    $c disconnect
}

test containers-ls-old {Listing containers (old style)} -setup {
    set pfx "Imp0ss1bl3__"
    exec -ignorestderr -- docker run --rm -d --name=${pfx} alpine sh -c "while true ; do sleep 1 ; done"
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    foreach container [$c containers] {
        if { [dict exists $container Names] } {
            foreach name [dict get $container Names] {
                set name [string trimleft $name "/"]
                if { $name eq $pfx } {
                    return $name
                }
            }
        }
    }
} -result "Imp0ss1bl3__" -cleanup {
    exec -ignorestderr -- docker kill $pfx
    $c disconnect
}

test containers-ls-stopped {Finding stopped containers} -setup {
    set pfx "Imp0ss1bl3__"
    exec -ignorestderr -- docker run -d --name=${pfx} alpine sh -c "while true ; do sleep 1 ; done"
    exec -ignorestderr -- docker kill $pfx
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    foreach container [$c container ls -all 1] {
        if { [dict exists $container Names] } {
            foreach name [dict get $container Names] {
                set name [string trimleft $name "/"]
                if { $name eq $pfx } {
                    return $name
                }
            }
        }
    }
} -result "Imp0ss1bl3__" -cleanup {
    exec -ignorestderr -- docker rm -f $pfx
    $c disconnect
}

test containers-ls-filter {Listing containers with filter} -setup {
    set pfx "Imp0ss1bl3__"
    exec -ignorestderr -- docker run --rm -d --name=${pfx} alpine sh -c "while true ; do sleep 1 ; done"
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    foreach container [$c container ls -filter [docker filter name $pfx]] {
        if { [dict exists $container Names] } {
            foreach name [dict get $container Names] {
                set name [string trimleft $name "/"]
                if { $name eq $pfx } {
                    return $name
                }
            }
        }
    }
} -result "Imp0ss1bl3__" -cleanup {
    exec -ignorestderr -- docker kill $pfx
    $c disconnect
}

test containers-inspect {Inspect container} -setup {
    set pfx "Imp0ss1bl3__"
    exec -ignorestderr -- docker run --rm -d --name=${pfx} alpine sh -c "while true ; do sleep 1 ; done"
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    set container [$c container inspect $pfx]
    return [string trimleft [dict get $container Name] /]
} -result "Imp0ss1bl3__" -cleanup {
    exec -ignorestderr -- docker kill $pfx
    $c disconnect
}

test containers-inspect-old {Inspect container (old style)} -setup {
    set pfx "Imp0ss1bl3__"
    exec -ignorestderr -- docker run --rm -d --name=${pfx} alpine sh -c "while true ; do sleep 1 ; done"
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    set container [$c inspect $pfx]
    return [string trimleft [dict get $container Name] /]
} -result "Imp0ss1bl3__" -cleanup {
    exec -ignorestderr -- docker kill $pfx
    $c disconnect
}

test containers-ps {Processes inside container} -setup {
    set pfx "Imp0ss1bl3__"
    exec -ignorestderr -- docker run --rm -d --name=${pfx} alpine sh -c "while true ; do sleep 1 ; done"
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    foreach p [dict get [$c container top $pfx] Processes] {
        return [lindex $p end]
    }
} -match glob -result "*while true ; do sleep 1 ; done*" -cleanup {
    exec -ignorestderr -- docker kill $pfx
    $c disconnect
}

test containers-ps-old {Processes inside container (old style)} -setup {
    set pfx "Imp0ss1bl3__"
    exec -ignorestderr -- docker run --rm -d --name=${pfx} alpine sh -c "while true ; do sleep 1 ; done"
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    foreach p [dict get [$c container top $pfx] Processes] {
        return [lindex $p end]
    }
} -match glob -result "*while true ; do sleep 1 ; done*" -cleanup {
    exec -ignorestderr -- docker kill $pfx
    $c disconnect
}

test containers-logs {Get container logs} -setup {
    set pfx "Imp0ss1bl3__"
    exec -ignorestderr -- docker run --rm -d --name=${pfx} alpine sh -c "echo 'tcltest' ; echo 'second line' ; while true ; do sleep 1 ; done"
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    set logs [$c container logs -follow false -stdout 1 $pfx]
    return [string trim [lindex $logs 0]]
} -result "tcltest" -cleanup {
    exec -ignorestderr -- docker kill $pfx
    $c disconnect
}

test containers-logs-old {Get container stats (old style)} -setup {
    set pfx "Imp0ss1bl3__"
    exec -ignorestderr -- docker run --rm -d --name=${pfx} alpine sh -c "while true ; do sleep 1 ; done"
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    set stats [$c stats $pfx]
    set pids [dict get $stats pids_stats current]
    return [expr {$pids>0}]
} -result 1 -cleanup {
    exec -ignorestderr -- docker kill $pfx
    $c disconnect
}

test containers-stats {Get container stats} -setup {
    set pfx "Imp0ss1bl3__"
    exec -ignorestderr -- docker run --rm -d --name=${pfx} alpine sh -c "while true ; do sleep 1 ; done"
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    set stats [$c container stats -stream 0 $pfx]
    set pids [dict get $stats pids_stats current]
    return [expr {$pids>0}]
} -result 1 -cleanup {
    exec -ignorestderr -- docker kill $pfx
    $c disconnect
}

test containers-stats-stream {Get container stats stream} -setup {
    set pfx "Imp0ss1bl3__"
    exec -ignorestderr -- docker run --rm -d --name=${pfx} alpine sh -c "while true ; do sleep 1 ; done"
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    set ::stats ""
    set stats [$c container stats -stream 1 $pfx [list set ::stats]]
    vwait ::stats
    set pids [dict get $stats pids_stats current]
    return [expr {$pids>0}]
} -result 1 -cleanup {
    exec -ignorestderr -- docker kill $pfx
    $c disconnect
}

test containers-create {Create container}  -setup {
    set pfx "Imp0ss1bl3__"
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    # Create a container and inspect it to find it back.
    $c container create -name $pfx {"image":"alpine","HostConfig":{"AutoRemove":true},"command":"sh -c \"while true ; do sleep 1 ; done\""}
    set container [$c container inspect $pfx]
    return [string trimleft [dict get $container Name] /]
} -result "Imp0ss1bl3__" -cleanup {
    exec -ignorestderr -- docker rm -f $pfx
    $c disconnect
}

test containers-stop {Stop container} -setup {
    set pfx "Imp0ss1bl3__"
    exec -ignorestderr -- docker run --rm -d --name=${pfx} alpine sh -c "while true ; do sleep 1 ; done"
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    if { [WaitFor $c $pfx] eq "running" } {
        $c container stop $pfx
        set nfo [$c container inspect $pfx]
        return [dict get $nfo State Status]
    }
    return ""
} -result "removing" -cleanup {
    $c disconnect
}

test containers-restart {Restart container} -setup {
    set pfx "Imp0ss1bl3__"
    exec -ignorestderr -- docker run --rm -d --name=${pfx} alpine sh -c "while true ; do sleep 1 ; done"
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    if { [WaitFor $c $pfx] eq "running" } {
        $c container restart $pfx
        set nfo [$c container inspect $pfx]
        return [dict get $nfo State Status]
    }
    return ""
} -match regexp -result "restarting|running" -cleanup {
    exec -ignorestderr -- docker kill $pfx
    $c disconnect
}

test containers-kill {Kill container} -setup {
    set pfx "Imp0ss1bl3__"
    exec -ignorestderr -- docker run --rm -d --name=${pfx} alpine sh -c "while true ; do sleep 1 ; done"
} -body {
    set c [docker connect unix:///var/run/docker.sock]
    if { [WaitFor $c $pfx] eq "running" } {
        $c container kill $pfx
        foreach container [$c container ls] {
            if { [dict exists $container Names] } {
                foreach name [dict get $container Names] {
                    set name [string trimleft $name "/"]
                    if { $name eq $pfx } {
                        return $name
                    }
                }
            }
        }
    }
    return ""
} -result "" -cleanup {
    $c disconnect
}


cleanupTests
